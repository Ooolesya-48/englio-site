import { useParams, useNavigate, useLocation } from "react-router-dom";
import { useState, useEffect } from "react";
import { db } from "./firebase";
import { doc, getDoc, setDoc, collection, getDocs } from "firebase/firestore";






function CollectionView() {
  const { id } = useParams(); // –ë–µ—Ä–µ–º id –∏–∑ URL
  const navigate = useNavigate();
  const [collectionData, setCollectionData] = useState(null);
  const [loading, setLoading] = useState(true);
  const location = useLocation();
  const [isSubModalOpen, setIsSubModalOpen] = useState(false);
  const [newSubName, setNewSubName] = useState("");

  useEffect(() => {
    async function fetchCollection() {
      console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", id);
  
      try {
        const docRef = doc(db, "categories", id);
        const docSnap = await getDoc(docRef);
  
        if (!docSnap.exists()) {
          console.error("–ü–æ–¥–±–æ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
          setLoading(false);
          return;
        }
  
        const categoryData = docSnap.data();
        console.log("–î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", categoryData);
  
        if (!categoryData.subcategories || categoryData.subcategories.length === 0) {
          setCollectionData({
            ...categoryData,
            subcategories: [],
          });
          setLoading(false);
          return;
        }
  
        const subcategoriesWithProgress = await Promise.all(
          categoryData.subcategories.map(async (sub) => {
            try {
              const wordsRef = collection(db, "categories", id, "subcategories", sub.id, "words");
              const wordsSnap = await getDocs(wordsRef);
              
              const words = [];
              wordsSnap.forEach((doc) => {
                words.push(doc.data());
              });
              
              console.log("words:", words);
              const learnedCount = words.filter(word => (word.rating || 0) === 5).length;
  
              return {
                ...sub,
                learnedCount: learnedCount,
                wordCount: words.length
              };
            } catch (error) {
              console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${sub.id}:`, error);
              return {
                ...sub,
                learnedCount: 0,
                wordCount: 0
              };
            }
          })
        );
  
        console.log("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º:", subcategoriesWithProgress);
  
        setCollectionData({
          ...categoryData,
          subcategories: subcategoriesWithProgress
        });
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–±–æ—Ä–∫–∏:", error);
      } finally {
        setLoading(false);
      }
    }
  
    fetchCollection();
  }, [id]);
    
 

  async function handleCreateSubcategory() {
    if (!newSubName.trim()) {
      alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏!");
      return;
    }
  
    try {
      const newSubId = crypto.randomUUID();
      const categoryRef = doc(db, "categories", id);
      const categorySnap = await getDoc(categoryRef);
  
      if (categorySnap.exists()) {
        const categoryData = categorySnap.data();
        const updatedSubcategories = [...(categoryData.subcategories || []), {
          id: newSubId,
          name: newSubName,
          wordCount: 0,
        }];
        await setDoc(categoryRef, { ...categoryData, subcategories: updatedSubcategories });
  
        alert("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
        setIsSubModalOpen(false);
        setNewSubName("");
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        window.location.reload();
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  }
  
  if (loading || !collectionData) {
    return <div className="page collection-view-page">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  return (
    <div className="page collection-view-page">
  <div className="container">
    <button className="close-button" onClick={() => navigate("/collections")}>‚úñ</button>

    <div className="collection-header">
      <h2>{collectionData.name}</h2>
      <p>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {collectionData.subcategories ? collectionData.subcategories.length : 0}</p>
    </div>
    <div className="add-subcategory">
    <button className="main-button" onClick={() => setIsSubModalOpen(true)}>
  ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
    </button>
    {isSubModalOpen && (
  <div className="overlay">
    <div className="modal">
      <button className="close-button" onClick={() => setIsSubModalOpen(false)}>‚úñ</button>
      <h3>–ù–æ–≤–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è</h3>

      <div className="input-block">
        <label>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</label>
        <input
          type="text"
          value={newSubName}
          onChange={(e) => setNewSubName(e.target.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
        />
      </div>

      <button className="main-button" onClick={handleCreateSubcategory}>
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
      </button>
    </div>
  </div>
)}


</div>
    <div className="subcategory-list">
      {collectionData.subcategories && collectionData.subcategories.length > 0 ? (
        <div className="subcategory-grid">
          {collectionData.subcategories.map((sub) => (
            <div key={sub.id} className="subcategory-card">
            <div className="subcategory-info">
              <div className="subcategory-emoji">
                üìö
              </div>
          
              <div className="subcategory-text">
                <h3>{sub.name}</h3>
                <p>–ò–∑—É—á–µ–Ω–æ: {sub.learnedCount || 0} / {sub.wordCount || 0} —Å–ª–æ–≤</p>
                <div className="progress-bar">
                <div
                    className="progress"
                    style={{
                        width: sub.wordCount > 0
                        ? `${Math.round((sub.learnedCount / sub.wordCount) * 100)}%`
                        : `0%`
                    }}
                    ></div>
                </div>
              </div>
            </div>
          
            <div className="subcategory-buttons">
              <button className="main-button small" onClick={() => alert('–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ')}>
                –ò–∑—É—á–∞—Ç—å
              </button>
              <button
                className="secondary-button small"
                onClick={() => navigate(`/collections/${id}/${sub.id}`)}
              >
                –û—Ç–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
          ))}
        </div>
      ) : (
        <p>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.</p>
      )}
      
    </div>
  </div>
</div>

  );
}

export default CollectionView;
